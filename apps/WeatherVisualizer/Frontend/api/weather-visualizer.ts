/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * WeatherVisualizer.Api
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export interface WeatherMeasurementEntry {
  /** @nullable */
  city?: string | null;
  /** @nullable */
  country?: string | null;
  id?: string;
  lastUpdated?: string;
  temperatureC?: number;
  windKph?: number;
}





export const getWeatherMeasurements = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WeatherMeasurementEntry[]>> => {
    
    return axios.get(
      `/WeatherMeasurements`,options
    );
  }


export const getGetWeatherMeasurementsQueryKey = () => {
    return [`/WeatherMeasurements`] as const;
    }

    
export const getGetWeatherMeasurementsQueryOptions = <TData = Awaited<ReturnType<typeof getWeatherMeasurements>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherMeasurements>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWeatherMeasurementsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeatherMeasurements>>> = ({ signal }) => getWeatherMeasurements({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWeatherMeasurements>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWeatherMeasurementsQueryResult = NonNullable<Awaited<ReturnType<typeof getWeatherMeasurements>>>
export type GetWeatherMeasurementsQueryError = AxiosError<unknown>



export function useGetWeatherMeasurements<TData = Awaited<ReturnType<typeof getWeatherMeasurements>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherMeasurements>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWeatherMeasurementsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




